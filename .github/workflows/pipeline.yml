name: Spring CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: lima2803/portifolio-backend
  VERSION: 1.0.0

jobs:
  build-test-sonar:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Build with Maven
      run: mvn -B clean package -DskipTests

    - name: Run Tests
      run: mvn test

    - name: SonarCloud Analysis
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=GabrielLima2803_portifolio-backend
          -Dsonar.organization=gabriellima2803
          -Dsonar.java.binaries=target/classes


  build-docker-image:
    needs: build-test-sonar
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Build with Maven
      run: mvn -B clean package -DskipTests

    - name: List target directory
      run: ls -l target

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ env.IMAGE_NAME }}:latest
          ${{ env.IMAGE_NAME }}:${{ env.VERSION }}


  test-deploy:
    needs: build-docker-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Instalar kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Instalar Kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.17.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      - name: Criar cluster Kind
        run: kind create cluster --name portifolio-cluster

      - name: Aguardar Cluster estar pronto
        run: sleep 10

      - name: Verificar cluster
        run: |
          kubectl cluster-info
          kubectl get nodes
          kubectl get pods -A

      - name: Criar Namespace e Aplicar Manifests
        run: |
          kubectl create namespace staging
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/staging-deployment.yaml -n staging
          kubectl rollout status deployment/portifolio-backend -n staging

  